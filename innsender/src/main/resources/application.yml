server:
  port: 9064

management:
  endpoint:
    health:
      show-details: always
  endpoints.web:
    exposure:
      include: info, health, metrics, refresh, prometheus
    base-path: "/internal"
  metrics:
    export:
      prometheus:
        enabled: true
---
spring:
  config:
    activate:
      on-profile: test | default | spring

  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

restconfig:
  version: 1.0
  username: srvuser
  password: password
  sharedUsername: shareduser
  sharedPassword: password
  maxFileSize: 104857600
  sanityHost: http://localhost:8080
  sanityEndpoint: /soknadsveiviserproxy/skjemautlisting
  filestorageHost: http://localhost:9042
  filestorageEndpoint: /filer
  filestorageParameters: /
  filesInOneRequestToFilestorage: 10
  soknadsMottakerHost: http://localhost:9043
  soknadsMottakerEndpoint: /save
  frontEndFortsettEndpoint: http://localhost:3000/dokumentinnsending/oversikt/

dbconfig:
  profiles: test
  databaseName: postgres
  mountPathVault: postgresql/preprod-fss
  databaseUrl: jdbc:postgresql://localhost:5432/postgres
  embedded: true
  useVault: false

kafkaconfig:
  profiles: test
  tjenesteUrl: https://localhost
  gjenopptaSoknadsArbeid: /dokumentinnsending/oversikt/
  ettersendePaSoknad: /dokumentinnsending/ettersending/
  username: soknadinnsender
  password:
  servers: localhost:29092
  schemaRegistryUrl: http://localhost:8081
  clientId: kafkaproducer
  secure:
  protocol:
  salsmec:
  kafkaTopicBeskjed: aapen-brukernotifikasjon-nyBeskjed-v1
  kafkaTopicOppgave: aapen-brukernotifikasjon-nyOppgave-v1
  kafkaTopicDone: aapen-brukernotifikasjon-done-v1
  publisereEndringer: true

---
spring:
  config:
    activate:
      on-profile: dev | prod | docker

  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE}MB
      max-request-size: ${MAX_FILE_SIZE}MB

restconfig:
  version: ${APP_VERSION}
  username: ${APPLICATION_USERNAME}
  password: ${APPLICATION_PASSWORD}
  sharedUsername: ${SHARED_USERNAME}
  sharedPassword: ${SHARED_PASSWORD}
  maxFileSize: ${MAX_FILE_SIZE}
  sanityHost: ${SANITY_HOST}
  sanityEndpoint: ${SANITY_ENDPOINT}
  filestorageHost: ${FILESTORAGE_HOST}
  filestorageEndpoint: ${FILESTORAGE_ENDPOINT}
  filestorageParameters: ${FILESTORAGE_PARAMETERS}
  filesInOneRequestToFilestorage: 10
  soknadsMottakerHost: ${SOKNADSMOTTAKER_HOST}
  soknadsMottakerEndpoint: ${SOKNADSMOTTAKER_ENDPOINT}
  frontEndFortsettEndpoint: https://${TJENESTE_URL}${GJENOPPTA_SOKNADS_ARBEID}

dbconfig:
  profiles: ${SPRING_PROFILES_ACTIVE}
  databaseName: ${DATABASE_NAME}
  mountPathVault: ${VAULT_DB_PATH}
  databaseUrl: ${DATABASE_JDBC_URL}
  embedded: false
  useVault: true

kafkaconfig:
  profiles: ${SPRING_PROFILES_ACTIVE}
  tjenesteUrl: ${TJENESTE_URL}
  gjenopptaSoknadsArbeid: ${GJENOPPTA_SOKNADS_ARBEID}
  ettersendePaSoknad: ${ETTERSENDE_PA_SOKNAD}
  username: ${APPLICATION_USERNAME}
  password: ${APPLICATION_PASSWORD}
  servers: ${KAFKA_BOOTSTRAP_SERVERS}
  schemaRegistryUrl: ${SCHEMA_REGISTRY_URL}
  clientId: ${APPLICATION_USERNAME}
  secure: ${KAFKA_SECURITY}
  protocol: ${KAFKA_SECPROT}
  salsmec: ${KAFKA_SASLMEC}
  kafkaTopicBeskjed: ${KAFKA_TOPIC_BESKJED}
  kafkaTopicOppgave: ${KAFKA_TOPIC_OPPGAVE}
  kafkaTopicDone: ${KAFKA_TOPIC_DONE}
  publisereEndringer: ${PUBLISERE_BRUKERNOTIFIKASJONER}
