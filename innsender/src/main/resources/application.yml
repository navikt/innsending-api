server:
  port: 9064
  max-http-header-size: 16384

management:
  endpoint:
    health:
      show-details: always
  endpoints.web:
    exposure:
      include: info, health, metrics, refresh, prometheus
    base-path: "/internal"
  metrics:
    export:
      prometheus:
        enabled: true

cron:
  startSlettGamleIkkeInnsendteSoknader: 0 0 2 * * *
  slettEldreEnn: 56
  startSlettInnsendteFiler: 0 0 5 * * *
  slettInnsendtFilEldreEnn: 1
  startSlettPermanentIkkeInnsendteSoknader: 0 0 3 * * *
  slettPermanentEldreEnn: 365
  # Kjører hvert 11. minutt
  runVerifyArchivedApplications: 0 0,11 0 ? * *

ettersendingsfrist: 14

verifyArchivedApplications:
  offsetMinutes: 95

kafka:
  applicationId: ${KAFKA_STREAMS_APPLICATION_ID}
  brokers: ${KAFKA_BROKERS}
  security:
    enabled: ${KAFKA_SECURITY}
    protocol: SSL
    keyStoreType: PKCS12
    keyStorePath: ${KAFKA_KEYSTORE_PATH}
    keyStorePassword: ${KAFKA_CREDSTORE_PASSWORD}
    trustStorePath: ${KAFKA_TRUSTSTORE_PATH}
    trustStorePassword: ${KAFKA_CREDSTORE_PASSWORD}
  topics:
    messageTopic: ${KAFKA_MESSAGE_TOPIC}

---
spring:
  config:
    activate:
      on-profile: default | spring

  application:
    name:

  codec:
    max-in-memory-size: 104857600

  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

  flyway:
    enabled: true

  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?user=postgres&password=postgres

restconfig:
  version: 1.0
  username: srvuser
  password: password
  sharedUsername: innsending
  sharedPassword: password
  maxFileSize: 50
  maxFileSizeSum: 150
  sanityHost: https://www.nav.no
  sanityEndpoint: /soknader/api/sanity/skjemautlisting
  filestorageHost: http://localhost:9043/filestorage-api
  filestorageEndpoint: /filer
  filestorageParameters: /
  filesInOneRequestToFilestorage: 10
  soknadsMottakerHost: http://localhost:9043/soknadsmottaker-api
  soknadsMottakerEndpoint: /save
  frontEndFortsettEndpoint: http://localhost:3000/dokumentinnsending/oversikt/
  clientId: clientId
  clientSecret: clientSecret
  pdlScope: api://dev-fss.pdl.pdl-api/.default
  pdlUrl: http://localhost:9043/pdl-api
  safselvbetjeningUrl: http://localhost:9043/safselvbetjening-api
  safUrl: http://localhost:9043/saf-api
  azureUrl: http://localhost:9043/azure-api

brukernotifikasjonconfig:
  profiles: test
  tjenesteUrl: https://localhost
  publisereEndringer: true

no.nav.security.jwt:
  mock:
    enable: true

---
spring:
  config:
    activate:
      on-profile: docker

  flyway:
    enabled: true
  datasource:
    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}
    hikari:
      maximum-pool-size: 20
      connection-timeout: 10000
      max-lifetime: 50001
      validationTimeout: 5000
      leak-detection-threshold: 50000
    dbcp2:
      test-on-borrow: true
      validation-query: "SELECT 1"

---
spring:
  config:
    activate:
      on-profile: dev

cron:
  # Kjører hvert 11. minutt
  runVerifyArchivedApplications: 0 */11 * ? * *

verifyArchivedApplications:
  offsetMinutes: 10
  timespanHours: 24
---
spring:
  config:
    activate:
      on-profile: dev | prod

  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE}MB
      max-request-size: ${MAX_FILE_SIZE}MB

  flyway:
    enabled: true
  datasource:
    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}?user=${DATABASE_USERNAME}&password=${DATABASE_PASSWORD}
    hikari:
      minimum-idle: 1
      maximum-pool-size: 20
      connection-timeout: 50000
      max-lifetime: 50001
      validationTimeout: 20000
      leak-detection-threshold: 40000
    dbcp2:
      test-on-borrow: true
      validation-query: "SELECT 1"

restconfig:
  version: ${APP_VERSION}
  username: ${APPLICATION_USERNAME}
  password: ${APPLICATION_PASSWORD}
  sharedUsername: ${INNSENDING_USERNAME}
  sharedPassword: ${INNSENDING_PASSWORD}
  maxFileSize: ${MAX_FILE_SIZE}
  maxFileSizeSum: ${MAX_FILE_SIZE_SUM}
  sanityHost: ${SANITY_HOST}
  sanityEndpoint: ${SANITY_ENDPOINT}
  filestorageHost: ${FILESTORAGE_HOST}
  filestorageEndpoint: ${FILESTORAGE_ENDPOINT}
  filestorageParameters: ${FILESTORAGE_PARAMETERS}
  filesInOneRequestToFilestorage: 10
  soknadsMottakerHost: ${SOKNADSMOTTAKER_HOST}
  soknadsMottakerEndpoint: ${SOKNADSMOTTAKER_ENDPOINT}
  frontEndFortsettEndpoint: ${TJENESTE_URL}
  clientId: ${AZURE_APP_CLIENT_ID}
  clientSecret: ${AZURE_APP_CLIENT_SECRET}
  pdlScope: ${PDL_SCOPE}
  pdlUrl: ${PDL_URL}
  safselvbetjeningUrl: ${SAFSELVBETJENING_URL}
  safUrl: ${SAF_URL}
  azureUrl: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}



brukernotifikasjonconfig:
  profiles: ${SPRING_PROFILES_ACTIVE}
  tjenesteUrl: ${TJENESTE_URL}
  publisereEndringer: ${PUBLISERE_BRUKERNOTIFIKASJONER}

ettersendingsfrist: ${ETTERSENDINGSFRIST}

no.nav.security.jwt:
  issuer.tokenx:
    discoveryurl: ${TOKEN_X_WELL_KNOWN_URL}
    accepted_audience: ${TOKEN_X_CLIENT_ID}

  client:
    registration:
      tokenx-safselvbetjening:
        token-endpoint-url: ${TOKENDINGS_BASE_URL}/token
        grant-type: urn:ietf:params:oauth:grant-type:token-exchange
        authentication:
          client-auth-method: private_key_jwt
          client-id: ${TOKEN_X_CLIENT_ID}
          client-jwk: ${TOKEN_X_PRIVATE_JWK}
        token-exchange:
          audience: ${SAFSELVBETJENING_TOKEN_X_AUDIENCE}

      tokenx-pdl:
        token-endpoint-url: ${TOKENDINGS_BASE_URL}/token
        grant-type: urn:ietf:params:oauth:grant-type:token-exchange
        authentication:
          client-auth-method: private_key_jwt
          client-id: ${TOKEN_X_CLIENT_ID}
          client-jwk: ${TOKEN_X_PRIVATE_JWK}
        token-exchange:
          audience: ${PDL_TOKEN_X_AUDIENCE}

      soknadsfillager:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${SOKNADSFILLAGER_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic

      soknadsmottaker:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${SOKNADSMOTTAKER_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-secret: ${AZURE_APP_CLIENT_SECRET}
          client-auth-method: client_secret_basic

      saf-maskintilmaskin:
        token-endpoint-url: ${AZURE_OPENID_CONFIG_TOKEN_ENDPOINT}
        grant-type: client_credentials
        scope: ${SAF_SCOPE}
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
          client-auth-method: private_key_jwt
